import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, SafeAreaView, Alert, ScrollView, Share } from 'react-native';
import { supabase } from './supabase';
import { getResponsiveWidth, isVerySmallScreen } from './responsive';

export default function ReportsPage({ onBack }) {
  const [students, setStudents] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [studentGrades, setStudentGrades] = useState([]);
  const [studentAttendance, setStudentAttendance] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchAllStudents();
  }, []);

  const fetchAllStudents = async () => {
    try {
      const { data, error } = await supabase
        .from('students')
        .select('*')
        .order('name');
      
      if (error) throw error;
      setStudents(data || []);
    } catch (error) {
      console.error('Error fetching students:', error);
    }
  };

  const fetchStudentData = async (student) => {
    setLoading(true);
    setSelectedStudent(student);
    
    try {
      // Fetch grades
      const { data: grades, error: gradesError } = await supabase
        .from('grades')
        .select('*')
        .eq('student_id', student.student_id)
        .order('created_at', { ascending: false });
      
      // Fetch attendance
      const { data: attendance, error: attendanceError } = await supabase
        .from('attendance')
        .select('*')
        .eq('student_id', student.student_id)
        .order('date', { ascending: false });
      
      setStudentGrades(grades || []);
      setStudentAttendance(attendance || []);
    } catch (error) {
      console.error('Error fetching student data:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateReport = async () => {
    if (!selectedStudent) {
      Alert.alert('Error', 'Please select a student first');
      return;
    }

    const gradesAvg = studentGrades.length > 0 
      ? (studentGrades.reduce((sum, g) => sum + g.score, 0) / studentGrades.length).toFixed(1)
      : 'No grades';
    
    const attendanceRate = studentAttendance.length > 0
      ? ((studentAttendance.filter(a => a.status === 'present').length / studentAttendance.length) * 100).toFixed(1)
      : 'No attendance';

    // Detailed grades breakdown
    const gradesBreakdown = studentGrades.map(g => 
      `${g.subject}: ${g.score}% (${g.grade}) - ${new Date(g.created_at).toLocaleDateString()}`
    ).join('\n');

    // Recent attendance records
    const attendanceBreakdown = studentAttendance.slice(0, 10).map(a => 
      `${new Date(a.date).toLocaleDateString()}: ${a.status.toUpperCase()}`
    ).join('\n');

    const report = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    STUDENT ACADEMIC REPORT
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

STUDENT INFORMATION:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Name: ${selectedStudent.name}
Class: ${selectedStudent.class}
Student ID: ${selectedStudent.student_id}
Email: ${selectedStudent.email || 'N/A'}

ACADEMIC PERFORMANCE:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Overall Grade Average: ${gradesAvg}${gradesAvg !== 'No grades' ? '%' : ''}
Total Subjects Graded: ${studentGrades.length}

GRADES BREAKDOWN:
${gradesBreakdown || 'No grades recorded'}

ATTENDANCE SUMMARY:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Attendance Rate: ${attendanceRate}${attendanceRate !== 'No attendance' ? '%' : ''}
Total Days Recorded: ${studentAttendance.length}
Present: ${studentAttendance.filter(a => a.status === 'present').length}
Absent: ${studentAttendance.filter(a => a.status === 'absent').length}
Late: ${studentAttendance.filter(a => a.status === 'late').length}

RECENT ATTENDANCE:
${attendanceBreakdown || 'No attendance recorded'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Report Generated: ${new Date().toLocaleString()}
Generated by: School Admin System
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;

    try {
      await Share.share({
        message: report,
        title: `${selectedStudent.name} - Academic Report`
      });
    } catch (error) {
      Alert.alert('Student Report', report);
    }
  };

  const renderStudentItem = ({ item }) => (
    <TouchableOpacity 
      style={[styles.studentCard, selectedStudent?.id === item.id && styles.selectedCard]}
      onPress={() => fetchStudentData(item)}
    >
      <Text style={styles.studentName}>{item.name}</Text>
      <Text style={styles.studentDetails}>Class: {item.class}</Text>
      <Text style={styles.studentDetails}>ID: {item.student_id}</Text>
    </TouchableOpacity>
  );

  const renderGradeItem = ({ item }) => (
    <View style={styles.dataCard}>
      <Text style={styles.dataTitle}>{item.subject}</Text>
      <Text style={styles.dataValue}>Score: {item.score}% ({item.grade})</Text>
      <Text style={styles.dataDate}>{new Date(item.created_at).toLocaleDateString()}</Text>
    </View>
  );

  const renderAttendanceItem = ({ item }) => (
    <View style={styles.dataCard}>
      <Text style={styles.dataTitle}>{new Date(item.date).toLocaleDateString()}</Text>
      <Text style={[styles.dataValue, { color: item.status === 'present' ? '#4ECDC4' : '#FF6B6B' }]}>
        {item.status.toUpperCase()}
      </Text>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Back</Text>
        </TouchableOpacity>
        <Text style={styles.title}>Reports</Text>
      </View>

      {!selectedStudent ? (
        <FlatList
          data={students}
          renderItem={renderStudentItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContent}
          ListEmptyComponent={
            <Text style={styles.emptyText}>No students found</Text>
          }
        />
      ) : (
        <ScrollView style={styles.detailsContainer}>
          <View style={styles.studentHeader}>
            <TouchableOpacity onPress={() => setSelectedStudent(null)}>
              <Text style={styles.backText}>‚Üê Back to Students</Text>
            </TouchableOpacity>
            <Text style={styles.studentTitle}>{selectedStudent.name}</Text>
            <Text style={styles.studentSubtitle}>Class: {selectedStudent.class}</Text>
          </View>

          <TouchableOpacity 
            style={styles.generateButton}
            onPress={generateReport}
          >
            <Text style={styles.buttonText}>üìÑ Generate & Share Report</Text>
          </TouchableOpacity>

          <Text style={styles.sectionTitle}>Grades ({studentGrades.length})</Text>
          <FlatList
            data={studentGrades}
            renderItem={renderGradeItem}
            keyExtractor={(item) => item.id.toString()}
            scrollEnabled={false}
            ListEmptyComponent={<Text style={styles.emptyText}>No grades recorded</Text>}
          />

          <Text style={styles.sectionTitle}>Attendance ({studentAttendance.length})</Text>
          <FlatList
            data={studentAttendance.slice(0, 10)}
            renderItem={renderAttendanceItem}
            keyExtractor={(item) => item.id.toString()}
            scrollEnabled={false}
            ListEmptyComponent={<Text style={styles.emptyText}>No attendance recorded</Text>}
          />
        </ScrollView>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: getResponsiveWidth(6),
    paddingTop: 10,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  backButton: {
    fontSize: 18,
    color: '#4a90e2',
    marginRight: 20,
  },
  title: {
    fontSize: isVerySmallScreen() ? 20 : 24,
    fontWeight: '600',
    color: '#333',
  },
  generateButton: {
    backgroundColor: '#4a90e2',
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  listContent: {
    paddingBottom: 20,
  },
  studentCard: {
    backgroundColor: '#f9f9f9',
    borderRadius: 12,
    padding: 15,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  selectedCard: {
    backgroundColor: '#e3f2fd',
    borderColor: '#4a90e2',
    borderWidth: 2,
  },
  studentName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 5,
  },
  studentDetails: {
    fontSize: 14,
    color: '#666',
  },
  detailsContainer: {
    flex: 1,
  },
  studentHeader: {
    marginBottom: 20,
  },
  backText: {
    fontSize: 16,
    color: '#4a90e2',
    marginBottom: 10,
  },
  studentTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
  },
  studentSubtitle: {
    fontSize: 16,
    color: '#666',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginTop: 20,
    marginBottom: 10,
  },
  dataCard: {
    backgroundColor: '#f9f9f9',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
  },
  dataTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
  },
  dataValue: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  dataDate: {
    fontSize: 12,
    color: '#999',
    marginTop: 2,
  },
  emptyText: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    marginTop: 40,
  },
});